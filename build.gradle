plugins {
    id 'java'
    id 'org.springframework.boot' version '2.5.8'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'jacoco'
}

group = 'com.cpumonitor'
version = '1.0.0'

java {
    sourceCompatibility = '11'
    targetCompatibility = '11'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.4.2'

    implementation 'io.springfox:springfox-boot-starter:3.0.0'
    implementation 'io.springfox:springfox-swagger-ui:3.0.0'
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy 'jacocoTestReport'
}

bootRun {
    systemProperty 'spring.profiles.active', project.hasProperty('profile') ? project.profile : 'default'
}

tasks.withType(Test) {
    systemProperty 'spring.profiles.active', project.hasProperty('profile') ? project.profile : 'default'
}

jacoco {
    toolVersion = "0.8.7"
}

jacocoTestReport {
    classDirectories.setFrom(
        files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                '**/CpuUsageScheduler.*', '**/CpumonitorApplication.*'
            ])
    }))
    
    reports {
        html.destination file("$buildDir/jacoco/report.html")
    }

    finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            enabled = true
            element = 'CLASS'

            classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it, exclude: [
                        '**/CpuUsageScheduler.*', '**/CpumonitorApplication.*'
                    ])
            }))

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.8
            }

            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.8
            }

        }
    }
}

check.dependsOn jacocoTestReport, jacocoTestCoverageVerification
